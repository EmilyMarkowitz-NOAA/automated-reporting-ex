---
title: "Talk like a Pirate!"
format: docx
---

<!-- Here in the 'setup' code chunk, we are stating that -->
<!-- we never want to display chunks in our output -->

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo=FALSE, message=FALSE, error=FALSE, include=FALSE, comment=FALSE)
```

# About example 2

This example expands on the previous example, but includes more skill building. Here you will learn:

 - Learn about 'parent' and 'child' docs
 - Cycle through child docs with new scripts and parameterize a quarto document
 - Apply chunk names
 - Using local functions in in-line code chunks

> This script is heavily based on the simpler and fabulous [example by Margaret Siple](https://github.com/MargaretSiple-NOAA/parameterized-indexing-example)

```{r data-wrangle}

# Load Data --------------------------------------------------------------------
library(here)
dat0 <- read.csv(file = here::here("data", "madlib_resp.csv"), 
                header = TRUE)

# Wrangle Data -----------------------------------------------------------------
# remove EHM test data
if (nrow(dat0)>2) {
  dat0 <- dat0[-1,] 
}
```

## MadLib Responses

These MadLib responses were generated on `r Sys.Date()`. 

```{r madlib-responces, echo=FALSE, message=FALSE, error=FALSE, include=FALSE, comment=FALSE}

# Functions --------------------------------------------------------------------

#' Determine if a word should be preceeded by "a" or "an" in text
#'
#' @param text Character. A word or phrase to consider. The function will only use the first character of the entry. 
#'
#' @examples
#` a_or_an(text = "Elephant")
#` a_or_an(text = "mammoth")
a_or_an <- function(text = "b") {
  out <- ifelse(test = # is the first letter a vowel?
                  substr(x = tolower(text), start = 1, stop = 1) %in% 
                  c("a", "e", "i", "o", "u"), 
                yes = "an", 
                no = "a")
  return(out)
}

# Loop through qmd -------------------------------------------------------------

src <- list() # an empty list to put all of the entry outputs in
for (i in 1:nrow(dat0)) { # cycle through each row of the spreadsheet
  # dynamically fill out the madlib template and add output to the list
  src[[i]] <- knitr::knit_expand(
    file = here::here('code2','template2_child_madlib_responces.qmd'))
}
# below, print the output from the spreadsheet used in the madlib template
```

`r paste(knitr::knit(text = unlist(src)), collapse = '\n')`

