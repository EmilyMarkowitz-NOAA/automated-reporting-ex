---
title: "Talk like a Pirate!"
subtitle: "`r paste0('DRAFT: ', format(Sys.time(), '%B %d, %Y'))`"
csl: "https://raw.githubusercontent.com/citation-style-language/styles/master/apa-no-ampersand.csl"
bibliography: "https://raw.githubusercontent.com/afsc-gap-products/citations/main/cite/bibliography.bib"
link-citations: true
format: 
  html: default
  docx:
    reference-doc: "../code3/styles_reference.docx" 
  pdf: 
    geometry:
      - top=0.75in
      - right=0.75in
      - bottom=0.75in
      - left=0.75in
      - heightrounded
    number-sections: true
    toc: false
execute:
  warning: false
  echo: false
  message: false
  error: false
---

<!-- Instead of the 'setup' code chunk, are able to add the setup parameters to the YAML -->
<!-- Instead of loading content within the `.qmd` we include the elements as params in the YAML -->

# About example 3

This example expands on the previous example. Here you will learn:

 - Call .qmd from .r script
 - Play around with the YAML
 - Apply table and figure cross referencing
 - Apply citation cross referencing
 - Use citation style library (CSL) and bibtex file (contains citations)

Good examples of GitHub repositories starting to use these workflows include: 
 - This script is heavily based on the simpler and fabulous [example by Margaret Siple](https://github.com/MargaretSiple-NOAA/parameterized-indexing-example)
 - [Bering sea bottom trawl survey data reports](https://github.com/afsc-gap-products/gap_bs_data_report); which was used to produce [@2021NEBS2022; @2018EBS2022; @2019NEBS2022; @2022NEBS2022]

## MadLib Responses

```{r params}

# Install libraries ------------------------------------------------------------
PKG <- c(
  "wordcloud", 
  "wordcloud2", 
  "gt"
)

for (p in PKG) { # this loops through each package, 
  if(!require(p,character.only = TRUE)) {  # checks to see if you have the package installed
    install.packages(p, verbose = FALSE) # installs the package if it is not installed
    require(p,character.only = TRUE)} # and loads the package library
}
# Load helper functions --------------------------------------------------------
source(here::here("code3", "data.r"))
source(here::here("code3", "functions.r"))

```

```{r madlib-responces}

# Loop through qmd -------------------------------------------------------------

src <- list() # an empty list to put all of the entry outputs in
for (i in 1:nrow(dat0)) { # cycle through each row of the spreadsheet
  # dynamically fill out the madlib template and add output to the list
  src[[i]] <- knitr::knit_expand(
    file = here::here('code3','template3_child_madlib_responces.qmd')) # verbatim the same to code2 example
}
# below, print the output from the spreadsheet used in the madlib template
```

`r paste(knitr::knit(text = unlist(src)), collapse = '\n')`

<!-- the below chunk is pulling calling a child doc (`child = ...`) and must otherwise remain empty-->

```{r assess-madlib_respones, child=here::here("code3", "template3_child_assess.qmd")}
```


# Works Cited

<div id="refs"></div>

